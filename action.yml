name: 'verible-formatter'
description: 'This action formats Verilog/SystemVerilog code'
author: 'Antmicro'
inputs:
  parameters:
    description: 'Additional parameters passed to formatter executable'
    required: false
    default: ''
  files:
    description: 'Optional array of files with source code to format'
    required: false
    default: './**/*.{v,sv,vh,svh,vi,svi}'
  github_token:
    description: 'GITHUB_TOKEN'
    default: ''
  fail_on_formatting_suggestions:
    description: 'If there are any formatting issues in the codebase, the action will return with an error'
    required: false
    default: 'false'
  verible_version:
    description: 'Use selected Verible version (defaults to latest release)'
    default: 'latest'

runs:
  using: 'composite'
  steps:
    - name: Check if running on Ubuntu Linux
      shell: bash
      run: |
          source /etc/os-release
          case "$ID" in
            ubuntu) echo 'Running on Ubuntu Linux'; exit 0 ;;
                 *) echo 'Not running on Ubuntu Linux'; exit 1 ;; 
          esac
    - name: Install dependencies
      shell: bash
      run: |
          sudo apt-get update -qq
          sudo apt-get -y install --no-install-recommends git python3 python3-click
    - name: Install Verible
      uses: chipsalliance/verible-actions-common/install-verible@main
      with:
        github_token: ${{ inputs.github_token }}
        verible_version: ${{ inputs.verible_version }}
    - name: Install reviewdog
      uses: chipsalliance/verible-actions-common/build-reviewdog@main
    - name: Run Verible formatter with reviewdog
      shell: bash
      run: |
        event_file=event.json
        diff_cmd="git diff FETCH_HEAD"
        if [ -f "$event_file" ]; then
            pr_branch=$(python3 -c "import sys, json; print(json.load(sys.stdin)['pull_request']['head']['ref'])" < $event_file)
            base_branch=$(python3 -c "import sys, json; print(json.load(sys.stdin)['pull_request']['base']['ref'])" < $event_file)
            git fetch origin $pr_branch
            git checkout $pr_branch
            echo "the PR branch is $pr_branch"
            echo "the base branch is $base_branch"
            diff_cmd="git diff $base_branch $pr_branch"
            export OVERRIDE_GITHUB_EVENT_PATH=`pwd`/$event_file
        fi

        shopt -s globstar nullglob
        verible-verilog-format --inplace ${{ inputs.parameters }} ${{ inputs.files }} > /dev/null 2>&1
        rm -rf verible
        tmp_file=$(mktemp)
        git diff >"${tmp_file}"
        git stash
        export REVIEWDOG_GITHUB_API_TOKEN="${{ inputs.github_token }}"
        echo "running reviewdog"
        reviewdog -name="verible-verilog-format" \
        -f=diff -f.diff.strip=1 \
        -reporter="github-pr-review" \
        -filter-mode="diff_context" \
        -level="info" \
        -diff="$diff_cmd" \
        -fail-on-error="false" <"${tmp_file}" || true

        if [ "${{ inputs.fail_on_formatting_suggestions }}" == "true" ]; then
          if [ -s "${tmp_file}" ]; then
            echo "Found code non-compliant with formatting rules!"
            exit 1
          else
            echo "Codebase is compliant with formatting rules"
          fi
        else
          echo "Not reporting checks for files, which are not in current PR."
        fi

        echo "done running reviewdog"
        cat "${tmp_file}" | wc
        if [ -f "$event_file" ]; then
            git checkout -
        fi
